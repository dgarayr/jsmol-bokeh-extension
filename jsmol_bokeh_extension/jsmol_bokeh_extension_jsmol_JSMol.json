{"hash": "58f76d07a7228c0df34aaada1bdb1925349707f8900c631ea10645b620fd52fa", "code": {"code": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JSMol = exports.JSMolView = void 0;\n// These \"require\" lines are similar to python \"import\" statements\nconst layout_dom_1 = require(\"models/layouts/layout_dom\");\nconst layout_1 = require(\"core/layout\");\nconst p = __importStar(require(\"core/properties\"));\n// This defines some default options for JSmol\n// See https://gist.github.com/jhjensen2/4701339 for more details.\nconst INFO = {\n    height: \"100%\",\n    width: \"100%\",\n    serverURL: \"https://chemapps.stolaf.edu/jmol/jsmol/php/jsmol.php\",\n    use: \"HTML5\",\n    j2sPath: \"https://chemapps.stolaf.edu/jmol/jsmol/j2s\",\n    script: \"background black;load https://dev-www.materialscloud.org/cofs/api/v2/cifs/febd2d02-5690-4a07-9013-505c9a06bc5b/content/download\",\n};\n// To create custom model extensions that will render on to the HTML canvas\n// or into the DOM, we must create a View subclass for the model.\n//\n// In this case we will subclass from the existing BokehJS ``LayoutDOMView``\nclass JSMolView extends layout_dom_1.LayoutDOMView {\n    initialize() {\n        super.initialize();\n        var url = this.model.js_url;\n        if (!url) {\n            url = \"https://chemapps.stolaf.edu/jmol/jsmol/JSmol.min.js\";\n        }\n        const script = document.createElement('script');\n        script.src = url;\n        script.async = false;\n        script.onload = () => this._init();\n        //script.onreadystatechange = (script.onload = () => this._init())\n        //script.onreadystatechange = script.onload\n        document.querySelector(\"head\").appendChild(script);\n    }\n    _init() {\n        // Create a new Jmol applet using the JSmol.js API. This assumes JSmol.js\n        // has already been loaded.\n        // Models will be able to specify and load external scripts automatically.\n        //\n        // BokehJS Views create <div> elements by default, accessible as this.el.\n        // if no info dict provided, use reasonable default\n        if (!this.model.info) {\n            this.model.info = INFO;\n        }\n        // disable usage tracker - this conflicts with cross-site-scripting policies when served over https\n        delete Jmol._tracker;\n        // returns html + assigns applet object to \"jmolApplet0\" variable\n        var html = Jmol.getAppletHtml(\"jmolApplet0\", this.model.info);\n        this._applet = jmolApplet0;\n        this.el.innerHTML = html;\n        // avoid creating a \"deferred\" applet\n        // https://sourceforge.net/p/jsmol/discussion/general/thread/48083aa7///10a6/bc1c\n        this._applet._cover(false);\n        // Set a listener so that when the Bokeh script input changes it is executed\n        this.connect(this.model.script_source.properties.data.change, () => {\n            console.log(\"Script source changed\");\n            Jmol.script(this._applet, this.model.script_source.get_column('script')[0]);\n        });\n    }\n    get child_models() {\n        return [];\n    }\n    _update_layout() {\n        this.layout = new layout_1.LayoutItem();\n        this.layout.set_sizing(this.box_sizing());\n    }\n}\nexports.JSMolView = JSMolView;\nJSMolView.__name__ = \"JSMolView\";\nclass JSMol extends layout_dom_1.LayoutDOM {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static initClass() {\n        // The ``type`` class attribute should generally match exactly the name\n        // of the corresponding Python class.\n        this.prototype.type = \"JSMol\";\n        // This is usually boilerplate. In some cases there may not be a view.\n        this.prototype.default_view = JSMolView;\n        // The define block adds corresponding \"properties\" to the JS model. These\n        // should basically line up 1-1 with the Python model class. Most property\n        // types have counterparts, e.g. ``bokeh.core.properties.String`` will be\n        // ``p.String`` in the JS implementation. Where the JS type system is not yet\n        // as rich, you can use ``p.Any`` as a \"wildcard\" property type.\n        this.define({\n            script_source: [p.Instance],\n            info: [p.Any],\n            js_url: [p.String],\n        });\n    }\n}\nexports.JSMol = JSMol;\nJSMol.__name__ = \"JSMol\";\nJSMol.initClass();\n//# sourceMappingURL=jsmol.py:JSMol.js.map", "deps": ["models/layouts/layout_dom", "core/layout", "core/properties"]}}